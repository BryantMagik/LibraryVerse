// This is my Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                @unique
  image                 String?
  emailVerified         DateTime?
  password              String?
  role                  UserRole               @default(USER)
  createdAt             DateTime               @default(now())
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]
  authoredBooks         Book[]                 @relation("AuthorBooks")
  bookshelf             UserBook[]             // Lista de libros en el estante del usuario
  comments              Comment[]
  likes                 Like[]
  follows               Follow[]               @relation("follower")
  following             Follow[]               @relation("following")
}

model Account {
  id                String                     @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?                    @db.Text
  access_token      String?                    @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?                    @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Book {
  id            String      @id @default(cuid())
  title         String
  description   String      @db.Text
  coverImage    String?
  genre         String?
  tags          String[]
  status        BookStatus
  viewCount     Int         @default(0)
  likeCount     Int         @default(0)
  commentCount  Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  authorId      String    
  author        User       @relation("AuthorBooks", fields: [authorId], references: [id])
  chapters      Chapter[]
  likes         Like[]
  comments      Comment[]
  bookshelfOwners UserBook[]

  @@unique([title, authorId])
}

model UserBook {
  userId    String
  bookId    String
  user      User     @relation(fields: [userId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])
  addedAt   DateTime @default(now()) // Fecha cuando el usuario agregó el libro a su estante

  @@id([userId, bookId])
}

enum BookStatus {
  DRAFT
  PUBLISHED
  PAUSED
}

model Chapter {
  id          String    @id @default(cuid())
  title       String
  content     String    @db.Text // Texto del capítulo
  order       Int       // Orden del capítulo dentro del libro
  bookId      String
  book        Book      @relation(fields: [bookId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  likes       Like[]    // Likes específicos para este capítulo
  comments    Comment[] // Comentarios específicos para este capítulo

  @@unique([bookId, order])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  bookId    String?
  chapterId String?
  user      User     @relation(fields: [userId], references: [id])
  book      Book?    @relation(fields: [bookId], references: [id])
  chapter   Chapter? @relation(fields: [chapterId], references: [id])
}
model Like {
  id        String   @id @default(cuid())
  userId    String
  bookId    String?
  chapterId String?
  user      User     @relation(fields: [userId], references: [id])
  book      Book?    @relation(fields: [bookId], references: [id])
  chapter   Chapter? @relation(fields: [chapterId], references: [id])
}

model Follow {
  id        String   @id @default(cuid())
  followerId String
  followingId String
  follower  User @relation("follower", fields: [followerId], references: [id])
  following User @relation("following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}