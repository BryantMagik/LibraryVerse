generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  image                 String?
  emailVerified         DateTime?
  password              String?
  role                  UserRole               @default(USER)
  createdAt             DateTime               @default(now())
  isTwoFactorEnabled    Boolean                @default(false)
  accounts              Account[]
  authoredBooks         Book[]                 @relation("AuthorBooks")
  twoFactorConfirmation TwoFactorConfirmation?
  bookshelf             UserBook[]
  chapterStatuses       UserChapterStatus[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Book {
  id              String     @id @default(cuid())
  title           String
  description     String
  coverImage      String?
  genre           Genre?
  tags            String[]
  status          BookStatus
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  authorId        String
  author          User       @relation("AuthorBooks", fields: [authorId], references: [id])
  chapters        Chapter[]
  bookshelfOwners UserBook[]
}

model UserBook {
  userId  String
  bookId  String
  addedAt DateTime @default(now())
  book    Book     @relation(fields: [bookId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
  @@id([userId, bookId])
}

model UserChapterStatus {
  userId    String
  chapterId String
  status    ChapterUserStatus
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@id([userId, chapterId])
}

model Chapter {
  id        String              @id @default(cuid())
  title     String
  content   String
  status    ChapterStatus
  order     String
  bookId    String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  book      Book                @relation(fields: [bookId], references: [id])
  userStatuses UserChapterStatus[]

  @@unique([bookId, order])
}

enum ChapterUserStatus {
  READ
  UNREAD
}

enum ChapterStatus {
  DRAFT
  PUBLISHED
  PAUSED
}

enum UserRole {
  ADMIN
  USER
}

enum Genre {
  FICTION
  NONFICTION
  MYSTERY
  FANTASY
  SCIFI
  ROMANCE
  HORROR
  BIOGRAPHY
  HISTORY
  POETRY
  OTHER
  ADVENTURE
  CHILDREN
  THRILLER
  CRIME
  DRAMA
  COMEDY
  ACTION
  SELF_HELP
  ART
  COOKING
  JUVENILE_NONFICTION
  POLITICAL_SCIENCE
  GRIEF
  LITERARY_CRITICISM
  FAMILY_RELATIONSHIPS
  COMPUTERS
  BIOGRAPHY_AUTOBIOGRAPHY
  YOUNG_ADULT_FICTION
}

enum BookStatus {
  DRAFT
  PUBLISHED
  PAUSED
}
